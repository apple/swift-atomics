//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Atomics open source project
//
// Copyright (c) 2020 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

// #############################################################################
// #                                                                           #
// #            DO NOT EDIT THIS FILE; IT IS AUTOGENERATED.                    #
// #                                                                           #
// #############################################################################


#if !ATOMICS_NATIVE_BUILTINS
import _AtomicsShims
#endif



extension Int8: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Int8

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int8
#else
    @usableFromInline
    internal typealias _Storage = _AtomicInt8Storage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = value
#else
      _storage = _sa_prepare_Int8(value)
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return _storage
#else
      let v = _sa_dispose_Int8(_storage)
      return v
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Int8.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Int8.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension Int8.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Int8 {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      desired,
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    let r = pointer._extract._atomicExchange(
      desired,
      ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int8,
    desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: Int8) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      ordering: ordering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int8,
    desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int8) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: Int8,
    desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int8) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }
}

extension Int8: AtomicInteger {}

extension Int8.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: operand, ordering: ordering)
    return r
  }

}





extension Int16: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Int16

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int16
#else
    @usableFromInline
    internal typealias _Storage = _AtomicInt16Storage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = value
#else
      _storage = _sa_prepare_Int16(value)
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return _storage
#else
      let v = _sa_dispose_Int16(_storage)
      return v
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Int16.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Int16.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension Int16.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Int16 {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      desired,
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    let r = pointer._extract._atomicExchange(
      desired,
      ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int16,
    desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: Int16) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      ordering: ordering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int16,
    desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int16) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: Int16,
    desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int16) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }
}

extension Int16: AtomicInteger {}

extension Int16.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: operand, ordering: ordering)
    return r
  }

}





extension Int32: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Int32

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int32
#else
    @usableFromInline
    internal typealias _Storage = _AtomicInt32Storage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = value
#else
      _storage = _sa_prepare_Int32(value)
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return _storage
#else
      let v = _sa_dispose_Int32(_storage)
      return v
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Int32.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Int32.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension Int32.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Int32 {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      desired,
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    let r = pointer._extract._atomicExchange(
      desired,
      ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int32,
    desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: Int32) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      ordering: ordering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int32,
    desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int32) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: Int32,
    desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int32) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }
}

extension Int32: AtomicInteger {}

extension Int32.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: operand, ordering: ordering)
    return r
  }

}





extension Int64: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Int64

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int64
#else
    @usableFromInline
    internal typealias _Storage = _AtomicInt64Storage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = value
#else
      _storage = _sa_prepare_Int64(value)
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return _storage
#else
      let v = _sa_dispose_Int64(_storage)
      return v
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Int64.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Int64.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension Int64.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Int64 {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      desired,
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    let r = pointer._extract._atomicExchange(
      desired,
      ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int64,
    desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: Int64) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      ordering: ordering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int64,
    desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int64) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: Int64,
    desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int64) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }
}

extension Int64: AtomicInteger {}

extension Int64.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: operand, ordering: ordering)
    return r
  }

}





extension UInt8: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt8

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int8
#else
    @usableFromInline
    internal typealias _Storage = _AtomicInt8Storage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = Int8(bitPattern: value)
#else
      _storage = _sa_prepare_Int8(Int8(bitPattern: value))
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return UInt8(bitPattern: _storage)
#else
      let v = _sa_dispose_Int8(_storage)
      return UInt8(bitPattern: v)
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt8.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt8.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension UInt8.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt8 {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return UInt8(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Int8(bitPattern: desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    let r = pointer._extract._atomicExchange(
      Int8(bitPattern: desired),
      ordering: ordering)
    return UInt8(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt8,
    desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: UInt8) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int8(bitPattern: expected),
      desired: Int8(bitPattern: desired),
      ordering: ordering)
    return (r.exchanged, UInt8(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt8,
    desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt8) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int8(bitPattern: expected),
      desired: Int8(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt8(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: UInt8,
    desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt8) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: Int8(bitPattern: expected),
      desired: Int8(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt8(bitPattern: r.original))
  }
}

extension UInt8: AtomicInteger {}

extension UInt8.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Int8(bitPattern: operand), ordering: ordering)
    return UInt8(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Int8(bitPattern: operand), ordering: ordering)
    return UInt8(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Int8(bitPattern: operand), ordering: ordering)
    return UInt8(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Int8(bitPattern: operand), ordering: ordering)
    return UInt8(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Int8(bitPattern: operand), ordering: ordering)
    return UInt8(bitPattern: r)
  }

}





extension UInt16: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt16

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int16
#else
    @usableFromInline
    internal typealias _Storage = _AtomicInt16Storage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = Int16(bitPattern: value)
#else
      _storage = _sa_prepare_Int16(Int16(bitPattern: value))
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return UInt16(bitPattern: _storage)
#else
      let v = _sa_dispose_Int16(_storage)
      return UInt16(bitPattern: v)
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt16.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt16.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension UInt16.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt16 {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return UInt16(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Int16(bitPattern: desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    let r = pointer._extract._atomicExchange(
      Int16(bitPattern: desired),
      ordering: ordering)
    return UInt16(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt16,
    desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: UInt16) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int16(bitPattern: expected),
      desired: Int16(bitPattern: desired),
      ordering: ordering)
    return (r.exchanged, UInt16(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt16,
    desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt16) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int16(bitPattern: expected),
      desired: Int16(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt16(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: UInt16,
    desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt16) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: Int16(bitPattern: expected),
      desired: Int16(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt16(bitPattern: r.original))
  }
}

extension UInt16: AtomicInteger {}

extension UInt16.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Int16(bitPattern: operand), ordering: ordering)
    return UInt16(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Int16(bitPattern: operand), ordering: ordering)
    return UInt16(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Int16(bitPattern: operand), ordering: ordering)
    return UInt16(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Int16(bitPattern: operand), ordering: ordering)
    return UInt16(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Int16(bitPattern: operand), ordering: ordering)
    return UInt16(bitPattern: r)
  }

}





extension UInt32: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt32

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int32
#else
    @usableFromInline
    internal typealias _Storage = _AtomicInt32Storage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = Int32(bitPattern: value)
#else
      _storage = _sa_prepare_Int32(Int32(bitPattern: value))
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return UInt32(bitPattern: _storage)
#else
      let v = _sa_dispose_Int32(_storage)
      return UInt32(bitPattern: v)
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt32.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt32.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension UInt32.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt32 {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return UInt32(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Int32(bitPattern: desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    let r = pointer._extract._atomicExchange(
      Int32(bitPattern: desired),
      ordering: ordering)
    return UInt32(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt32,
    desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: UInt32) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int32(bitPattern: expected),
      desired: Int32(bitPattern: desired),
      ordering: ordering)
    return (r.exchanged, UInt32(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt32,
    desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt32) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int32(bitPattern: expected),
      desired: Int32(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt32(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: UInt32,
    desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt32) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: Int32(bitPattern: expected),
      desired: Int32(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt32(bitPattern: r.original))
  }
}

extension UInt32: AtomicInteger {}

extension UInt32.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Int32(bitPattern: operand), ordering: ordering)
    return UInt32(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Int32(bitPattern: operand), ordering: ordering)
    return UInt32(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Int32(bitPattern: operand), ordering: ordering)
    return UInt32(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Int32(bitPattern: operand), ordering: ordering)
    return UInt32(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Int32(bitPattern: operand), ordering: ordering)
    return UInt32(bitPattern: r)
  }

}





extension UInt64: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt64

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int64
#else
    @usableFromInline
    internal typealias _Storage = _AtomicInt64Storage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = Int64(bitPattern: value)
#else
      _storage = _sa_prepare_Int64(Int64(bitPattern: value))
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return UInt64(bitPattern: _storage)
#else
      let v = _sa_dispose_Int64(_storage)
      return UInt64(bitPattern: v)
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt64.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt64.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension UInt64.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt64 {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return UInt64(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Int64(bitPattern: desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    let r = pointer._extract._atomicExchange(
      Int64(bitPattern: desired),
      ordering: ordering)
    return UInt64(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt64,
    desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: UInt64) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int64(bitPattern: expected),
      desired: Int64(bitPattern: desired),
      ordering: ordering)
    return (r.exchanged, UInt64(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt64,
    desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt64) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int64(bitPattern: expected),
      desired: Int64(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt64(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: UInt64,
    desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt64) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: Int64(bitPattern: expected),
      desired: Int64(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt64(bitPattern: r.original))
  }
}

extension UInt64: AtomicInteger {}

extension UInt64.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Int64(bitPattern: operand), ordering: ordering)
    return UInt64(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Int64(bitPattern: operand), ordering: ordering)
    return UInt64(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Int64(bitPattern: operand), ordering: ordering)
    return UInt64(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Int64(bitPattern: operand), ordering: ordering)
    return UInt64(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Int64(bitPattern: operand), ordering: ordering)
    return UInt64(bitPattern: r)
  }

}





extension Int: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Int

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int
#else
    @usableFromInline
    internal typealias _Storage = _AtomicIntStorage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = value
#else
      _storage = _sa_prepare_Int(value)
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return _storage
#else
      let v = _sa_dispose_Int(_storage)
      return v
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Int.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Int.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension Int.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Int {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: Int,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      desired,
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: Int,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int {
    let r = pointer._extract._atomicExchange(
      desired,
      ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int,
    desired: Int,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: Int) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      ordering: ordering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Int,
    desired: Int,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: Int,
    desired: Int,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Int) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }
}

extension Int: AtomicInteger {}

extension Int.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: Int = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: Int = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: Int = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: Int = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: operand, ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: Int = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: operand, ordering: ordering)
    return r
  }

}





extension UInt: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int
#else
    @usableFromInline
    internal typealias _Storage = _AtomicIntStorage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = Int(bitPattern: value)
#else
      _storage = _sa_prepare_Int(Int(bitPattern: value))
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return UInt(bitPattern: _storage)
#else
      let v = _sa_dispose_Int(_storage)
      return UInt(bitPattern: v)
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension UInt.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return UInt(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Int(bitPattern: desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    let r = pointer._extract._atomicExchange(
      Int(bitPattern: desired),
      ordering: ordering)
    return UInt(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt,
    desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: UInt) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int(bitPattern: expected),
      desired: Int(bitPattern: desired),
      ordering: ordering)
    return (r.exchanged, UInt(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: UInt,
    desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt) {
    let r = pointer._extract._atomicCompareExchange(
      expected: Int(bitPattern: expected),
      desired: Int(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt(bitPattern: r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: UInt,
    desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: Int(bitPattern: expected),
      desired: Int(bitPattern: desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, UInt(bitPattern: r.original))
  }
}

extension UInt: AtomicInteger {}

extension UInt.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingIncrement(
    by operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    let r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Int(bitPattern: operand), ordering: ordering)
    return UInt(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenWrappingDecrement(
    by operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    let r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Int(bitPattern: operand), ordering: ordering)
    return UInt(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseAnd(
    with operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    let r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Int(bitPattern: operand), ordering: ordering)
    return UInt(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseOr(
    with operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    let r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Int(bitPattern: operand), ordering: ordering)
    return UInt(bitPattern: r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThenBitwiseXor(
    with operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    let r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Int(bitPattern: operand), ordering: ordering)
    return UInt(bitPattern: r)
  }

}




#if (compiler(>=5.9) && _pointerBitWidth(_32)) || (compiler(<5.9) && (arch(i386) || arch(arm) || arch(arm64_32) || arch(wasm32)))
extension DoubleWord: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = DoubleWord

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = Int64
#else
    @usableFromInline
    internal typealias _Storage = _AtomicInt64Storage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = unsafeBitCast(value, to: Int64.self)
#else
      _storage = _sa_prepare_Int64(unsafeBitCast(value, to: Int64.self))
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return unsafeBitCast(_storage, to: DoubleWord.self)
#else
      let v = _sa_dispose_Int64(_storage)
      return unsafeBitCast(v, to: DoubleWord.self)
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == DoubleWord.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `DoubleWord.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension DoubleWord.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> DoubleWord {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return unsafeBitCast(r, to: DoubleWord.self)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      unsafeBitCast(desired, to: Int64.self),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> DoubleWord {
    let r = pointer._extract._atomicExchange(
      unsafeBitCast(desired, to: Int64.self),
      ordering: ordering)
    return unsafeBitCast(r, to: DoubleWord.self)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: DoubleWord,
    desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: DoubleWord) {
    let r = pointer._extract._atomicCompareExchange(
      expected: unsafeBitCast(expected, to: Int64.self),
      desired: unsafeBitCast(desired, to: Int64.self),
      ordering: ordering)
    return (r.exchanged, unsafeBitCast(r.original, to: DoubleWord.self))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: DoubleWord,
    desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: DoubleWord) {
    let r = pointer._extract._atomicCompareExchange(
      expected: unsafeBitCast(expected, to: Int64.self),
      desired: unsafeBitCast(desired, to: Int64.self),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, unsafeBitCast(r.original, to: DoubleWord.self))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: DoubleWord,
    desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: DoubleWord) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: unsafeBitCast(expected, to: Int64.self),
      desired: unsafeBitCast(desired, to: Int64.self),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, unsafeBitCast(r.original, to: DoubleWord.self))
  }
}




#else /* (compiler(>=5.9) && _pointerBitWidth(_32)) || (compiler(<5.9) && (arch(i386) || arch(arm) || arch(arm64_32) || arch(wasm32))) */
extension DoubleWord: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = DoubleWord

#if ATOMICS_NATIVE_BUILTINS
    @usableFromInline
    internal typealias _Storage = DoubleWord
#else
    @usableFromInline
    internal typealias _Storage = _AtomicDoubleWordStorage
#endif

    @usableFromInline
    internal var _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
#if ATOMICS_NATIVE_BUILTINS
      _storage = value
#else
      _storage = _sa_prepare_DoubleWord(value)
#endif
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
#if ATOMICS_NATIVE_BUILTINS
      return _storage
#else
      let v = _sa_dispose_DoubleWord(_storage)
      return v
#endif
    }
  }
}

extension UnsafeMutablePointer
where Pointee == DoubleWord.AtomicRepresentation {
  @inlinable @inline(__always)
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `DoubleWord.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(self).assumingMemoryBound(to: Pointee._Storage.self)
  }
}

extension DoubleWord.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> DoubleWord {
    let r = pointer._extract._atomicLoad(ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      desired,
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> DoubleWord {
    let r = pointer._extract._atomicExchange(
      desired,
      ordering: ordering)
    return r
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: DoubleWord,
    desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: DoubleWord) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      ordering: ordering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: DoubleWord,
    desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: DoubleWord) {
    let r = pointer._extract._atomicCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: DoubleWord,
    desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: DoubleWord) {
    let r = pointer._extract._atomicWeakCompareExchange(
      expected: expected,
      desired: desired,
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, r.original)
  }
}

#endif /* (compiler(>=5.9) && _pointerBitWidth(_32)) || (compiler(<5.9) && (arch(i386) || arch(arm) || arch(arm64_32) || arch(wasm32))) */

