%{
  #===----------------------------------------------------------------------===
  #
  # This source file is part of the Swift Atomics open source project
  #
  # Copyright (c) 2020 - 2023 Apple Inc. and the Swift project authors
  # Licensed under Apache License v2.0 with Runtime Library Exception
  #
  # See https://swift.org/LICENSE.txt for license information
  # See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
  #
  #===----------------------------------------------------------------------===

  from gyb_utils import (
    autogenerated_warning, loadOrderings, storeOrderings, updateOrderings,
    boolOperations, integerOperations, lowerFirst, argLabel)
}%
${autogenerated_warning()}

import XCTest
import Atomics

% for label, type, a, b in types:
/// Exercises all operations in a single-threaded context, verifying
/// they provide the expected results.
class BasicAtomic${label}Tests: XCTestCase {
% if label == "Pointer" or label == "OptionalPointer" or label == "MutablePointer" or label == "OptionalMutablePointer":
  private let _mfoo1: UnsafeMutablePointer<Foo> = {
    let p = UnsafeMutablePointer<Foo>.allocate(capacity: 1)
    p.initialize(to: Foo(1))
    return p
  }()
  private let _mfoo2: UnsafeMutablePointer<Foo> = {
    let p = UnsafeMutablePointer<Foo>.allocate(capacity: 1)
    p.initialize(to: Foo(2))
    return p
  }()

  private var _foo1: UnsafePointer<Foo> { UnsafePointer(_mfoo1) }
  private var _foo2: UnsafePointer<Foo> { UnsafePointer(_mfoo2) }

  deinit {
    _mfoo1.deinitialize(count: 1)
    _mfoo1.deallocate()

    _mfoo2.deinitialize(count: 1)
    _mfoo2.deallocate()
  }
% elif label == "RawPointer" or label == "OptionalRawPointer" or label == "MutableRawPointer" or label == "OptionalMutableRawPointer":
  private let _mraw1 = UnsafeMutableRawPointer.allocate(byteCount: 16, alignment: 1)
  private let _mraw2 = UnsafeMutableRawPointer.allocate(byteCount: 16, alignment: 1)

  private var _raw1: UnsafeRawPointer { UnsafeRawPointer(_mraw1) }
  private var _raw2: UnsafeRawPointer { UnsafeRawPointer(_mraw2) }

  deinit {
    _mraw1.deallocate()
    _mraw2.deallocate()
  }
% elif label == "Unmanaged" or label == "OptionalUnmanaged":
  private let _bar1 = Unmanaged<Bar>.passRetained(Bar(1))
  private let _bar2 = Unmanaged<Bar>.passRetained(Bar(2))

  deinit {
    _bar1.release()
    _bar2.release()
  }
% elif label == "Reference" or label == "OptionalReference":
  private let _baz1 = Baz(1)
  private let _baz2 = Baz(2)
% end

  func test_create_destroy() {
    let v = Atomic<${type}>(${a})
    XCTAssertEqual(v.load(ordering: .relaxed), ${a})

    let w = Atomic<${type}>(${b})
    XCTAssertEqual(w.load(ordering: .relaxed), ${b})
  }

% for (order, _, _, _) in loadOrderings:
  func test_load_${order}() {
    let v = Atomic<${type}>(${a})
    XCTAssertEqual(v.load(ordering: .${order}), ${a})

    let w = Atomic<${type}>(${b})
    XCTAssertEqual(w.load(ordering: .${order}), ${b})
  }

% end

% for (order, _, _, _) in storeOrderings:
  func test_store_${order}() {
    let v = Atomic<${type}>(${a})
    v.store(${b}, ordering: .${order})
    XCTAssertEqual(v.load(ordering: .relaxed), ${b})

    let w = Atomic<${type}>(${b})
    w.store(${a}, ordering: .${order})
    XCTAssertEqual(w.load(ordering: .relaxed), ${a})
  }

% end

% for (order, _, _, _, _) in updateOrderings:
  func test_exchange_${order}() {
    let v = Atomic<${type}>(${a})

    XCTAssertEqual(v.exchange(${a}, ordering: .${order}), ${a})
    XCTAssertEqual(v.load(ordering: .relaxed), ${a})

    XCTAssertEqual(v.exchange(${b}, ordering: .${order}), ${a})
    XCTAssertEqual(v.load(ordering: .relaxed), ${b})

    XCTAssertEqual(v.exchange(${b}, ordering: .${order}), ${b})
    XCTAssertEqual(v.load(ordering: .relaxed), ${b})
  }

% end

% for operation in ["compareExchange", "weakCompareExchange"]:
%   for (order, _, _, _, _) in updateOrderings:
  func test_${operation}_${order}() {
    let v = Atomic<${type}>(${a})

    var (exchanged, original): (Bool, ${type}) = v.${operation}(
      expected: ${a},
      desired: ${b},
      ordering: .${order})
    XCTAssertTrue(exchanged)
    XCTAssertEqual(original, ${a})
    XCTAssertEqual(v.load(ordering: .relaxed), ${b})

    (exchanged, original) = v.${operation}(
      expected: ${a},
      desired: ${b},
      ordering: .${order})
    XCTAssertFalse(exchanged)
    XCTAssertEqual(original, ${b})
    XCTAssertEqual(v.load(ordering: .relaxed), ${b})

    (exchanged, original) = v.${operation}(
      expected: ${b},
      desired: ${a},
      ordering: .${order})
    XCTAssertTrue(exchanged)
    XCTAssertEqual(original, ${b})
    XCTAssertEqual(v.load(ordering: .relaxed), ${a})

    (exchanged, original) = v.${operation}(
      expected: ${b},
      desired: ${a},
      ordering: .${order})
    XCTAssertFalse(exchanged)
    XCTAssertEqual(original, ${a})
    XCTAssertEqual(v.load(ordering: .relaxed), ${a})
  }

%   end
% end

% for operation in ["compareExchange", "weakCompareExchange"]:
%   for (successorder, _, _, _, _) in updateOrderings:
%     for (failorder, _, _, _) in loadOrderings:
  func test_${operation}_${successorder}_${failorder}() {
    let v = Atomic<${type}>(${a})

    var (exchanged, original): (Bool, ${type}) = v.${operation}(
      expected: ${a},
      desired: ${b},
      successOrdering: .${successorder},
      failureOrdering: .${failorder})
    XCTAssertTrue(exchanged)
    XCTAssertEqual(original, ${a})
    XCTAssertEqual(v.load(ordering: .relaxed), ${b})

    (exchanged, original) = v.${operation}(
      expected: ${a},
      desired: ${b},
      successOrdering: .${successorder},
      failureOrdering: .${failorder})
    XCTAssertFalse(exchanged)
    XCTAssertEqual(original, ${b})
    XCTAssertEqual(v.load(ordering: .relaxed), ${b})

    (exchanged, original) = v.${operation}(
      expected: ${b},
      desired: ${a},
      successOrdering: .${successorder},
      failureOrdering: .${failorder})
    XCTAssertTrue(exchanged)
    XCTAssertEqual(original, ${b})
    XCTAssertEqual(v.load(ordering: .relaxed), ${a})

    (exchanged, original) = v.${operation}(
      expected: ${b},
      desired: ${a},
      successOrdering: .${successorder},
      failureOrdering: .${failorder})
    XCTAssertFalse(exchanged)
    XCTAssertEqual(original, ${a})
    XCTAssertEqual(v.load(ordering: .relaxed), ${a})
  }

%     end
%   end
% end


% if type == "Bool":
  // Bool operations
%   for (name, _, operator, arglabel, _) in boolOperations:
%     for (order, _, _, _, _) in updateOrderings:
  func test_loadThen${name}_${order}() {
    let v = Atomic<${type}>(false)

    // The truth tables are super tiny, so just check every value
    for a in [false, true] {
      for b in [false, true] {
        v.store(a, ordering: .relaxed)
        let r = v.loadThen${name}(${argLabel(arglabel)}b, ordering: .${order})
        XCTAssertEqual(r, a, "a = \(a), b = \(b)")
        XCTAssertEqual(
          v.load(ordering: .relaxed),
          a ${operator} b,
          "a = \(a), b =\(b)")
      }
    }
  }

%     end
%   end

%   for (name, _, operator, arglabel, _) in boolOperations:
%     for (order, _, _, _, _) in updateOrderings:
  func test_${lowerFirst(name)}ThenLoad_${order}() {
    let v = Atomic<${type}>(false)

    // The truth tables are super tiny, so just check every value
    for a in [false, true] {
      for b in [false, true] {
        v.store(a, ordering: .relaxed)
        let r = v.${lowerFirst(name)}ThenLoad(
          ${argLabel(arglabel)}b,
          ordering: .${order})
        XCTAssertEqual(r, a ${operator} b, "a = \(a), b = \(b)")
        XCTAssertEqual(
          v.load(ordering: .relaxed),
          a ${operator} b,
          "a = \(a), b =\(b)")
      }
    }
  }

%     end
%   end
% end

% if type.startswith("Int") or type.startswith("UInt"):
// Integer operations
%   for (name, _, operator, arglabel, _) in integerOperations:
%     for (order, _, _, _, _) in updateOrderings:
  func test_loadThen${name}_${order}() {
    let a: ${type} = 3
    let b: ${type} = 8
    let c: ${type} = 12
    let result1: ${type} = a ${operator} b
    let result2: ${type} = result1 ${operator} c

    let v = Atomic<${type}>(a)

    let old1: ${type} = v.loadThen${name}(${argLabel(arglabel)}b, ordering: .${order})
    XCTAssertEqual(old1, a)
    XCTAssertEqual(v.load(ordering: .relaxed), result1)

    let old2: ${type} = v.loadThen${name}(${argLabel(arglabel)}c, ordering: .${order})
    XCTAssertEqual(old2, result1)
    XCTAssertEqual(v.load(ordering: .relaxed), result2)
  }

%     end
%   end

%   for (name, _, operator, arglabel, _) in integerOperations:
%     for (order, _, _, _, _) in updateOrderings:
  func test_${lowerFirst(name)}ThenLoad_${order}() {
    let a: ${type} = 3
    let b: ${type} = 8
    let c: ${type} = 12
    let result1: ${type} = a ${operator} b
    let result2: ${type} = result1 ${operator} c

    let v = Atomic<${type}>(a)

    let new1: ${type} = v.${lowerFirst(name)}ThenLoad(${argLabel(arglabel)}b, ordering: .${order})
    XCTAssertEqual(new1, result1)
    XCTAssertEqual(v.load(ordering: .relaxed), result1)

    let new2: ${type} = v.${lowerFirst(name)}ThenLoad(${argLabel(arglabel)}c, ordering: .${order})
    XCTAssertEqual(new2, result2)
    XCTAssertEqual(v.load(ordering: .relaxed), result2)
  }

%     end
%   end
% end

#if MANUAL_TEST_DISCOVERY
  public static var allTests: [(String, (BasicAtomic${label}Tests) -> () -> ())] = [
    ("test_create_destroy", test_create_destroy),
% for (order, _, _, _) in loadOrderings:
    ("test_load_${order}", test_load_${order}),
% end
% for (order, _, _, _) in storeOrderings:
    ("test_store_${order}", test_store_${order}),
% end
% for (order, _, _, _, _) in updateOrderings:
    ("test_exchange_${order}", test_exchange_${order}),
% end
% for (order, _, _, _, _) in updateOrderings:
    ("test_compareExchange_${order}", test_compareExchange_${order}),
% end
% for operation in ["compareExchange", "weakCompareExchange"]:
%   for (successorder, _, _, _, _) in updateOrderings:
%     for (failorder, _, _, _) in loadOrderings:
    ("test_${operation}_${successorder}_${failorder}", test_${operation}_${successorder}_${failorder}),
%     end
%   end
% end
% if type == "Bool":
%   for (name, _, operator, arglabel, _) in boolOperations:
%     for (order, _, _, _, _) in updateOrderings:
    ("test_loadThen${name}_${order}", test_loadThen${name}_${order}),
%     end
%   end
%   for (name, _, operator, arglabel, _) in boolOperations:
%     for (order, _, _, _, _) in updateOrderings:
    ("test_${lowerFirst(name)}ThenLoad_${order}", test_${lowerFirst(name)}ThenLoad_${order}),
%     end
%   end
% end
% if type.startswith("Int") or type.startswith("UInt"):
%   for (name, _, operator, arglabel, _) in integerOperations:
%     for (order, _, _, _, _) in updateOrderings:
    ("test_loadThen${name}_${order}", test_loadThen${name}_${order}),
%     end
%   end
%   for (name, _, operator, arglabel, _) in integerOperations:
%     for (order, _, _, _, _) in updateOrderings:
    ("test_${lowerFirst(name)}ThenLoad_${order}", test_${lowerFirst(name)}ThenLoad_${order}),
%     end
%   end
% end
  ]
#endif
}
% end
%{
# Local Variables:
# mode: swift
# End:
}%
